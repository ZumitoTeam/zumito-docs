"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[503],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},696:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:4,title:"Create event",description:"A quick guide on how to create a event."},i="Create event",l={unversionedId:"custom/create-event",id:"custom/create-event",title:"Create event",description:"A quick guide on how to create a event.",source:"@site/docs/custom/create-event.md",sourceDirName:"custom",slug:"/custom/create-event",permalink:"/docs/custom/create-event",draft:!1,editUrl:"https://github.com/fernandomema/zumito-docs/tree/main/packages/create-docusaurus/templates/shared/docs/custom/create-event.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Create event",description:"A quick guide on how to create a event."},sidebar:"tutorialSidebar",previous:{title:"Create database model",permalink:"/docs/custom/create-model"},next:{title:"Text Formatter",permalink:"/docs/custom/utilities/text-formatter"}},c={},s=[],u={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-event"},"Create event"),(0,a.kt)("p",null,"Events are used to listen for events emitted by the Discord.js client. This allows you to execute code when a specific event is emitted."),(0,a.kt)("p",null,"To start creating an event, you just need to run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx zumito-cli create event\n")),(0,a.kt)("p",null,"It will ask you for the name of the event, and the module where you want to create it."),(0,a.kt)("p",null,"\u2139\ufe0f Don't worry if you don't created the module yet, the CLI will create it for you."),(0,a.kt)("p",null,"After that, it will create a file in the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/modules/<module>/events")," folder with the name of the event."),(0,a.kt)("p",null,"The file will contain the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { FrameworkEvent, EventParameters } from 'zumito-framework';\n\nexport class EventName extends FrameworkEvent {\n\n    once = false;\n\n    async execute({ interaction, client, framework, }: EventParameters): Promise<void> {\n        // Event code\n    }\n\n}\n")),(0,a.kt)("p",null,"To start defining the event, you need to define the ",(0,a.kt)("inlineCode",{parentName:"p"},"once")," property. This property defines if the event will be executed only once or every time the event is emitted."),(0,a.kt)("p",null,"Now, let's define an example event for the ",(0,a.kt)("inlineCode",{parentName:"p"},"interactionCreate")," event.\nFirst, we will define the ",(0,a.kt)("inlineCode",{parentName:"p"},"once")," property to ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," cause we want to execute the event every time the event is emitted:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"once = false;\n")),(0,a.kt)("p",null,"Now, we need to define the ",(0,a.kt)("inlineCode",{parentName:"p"},"execute")," function. This function will be executed every time the event is emitted.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"execute")," function receives an ",(0,a.kt)("inlineCode",{parentName:"p"},"EventParameters")," object, which contains the following properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"message")," - The message that triggered the event. Only available for ",(0,a.kt)("inlineCode",{parentName:"li"},"messageCreate")," event."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"interaction")," - The interaction that triggered the event. Only available for ",(0,a.kt)("inlineCode",{parentName:"li"},"interactionCreate")," event."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"client")," - The Discord.js client."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"framework")," - The Zumito Framework instance.")),(0,a.kt)("p",null,"Now, let's define the event code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"async execute({ interaction, client, framework, }: EventParameters): Promise<void> {\n    interaction.reply('Hello world!');\n}\n")))}p.isMDXComponent=!0}}]);